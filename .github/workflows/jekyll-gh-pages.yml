name: Build Frontend and Deploy with Nginx

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: [ubuntu-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pipenv dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pipenv
        key: ${{ runner.os }}-pipenv-${{ hashFiles('backend/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pipenv-
          
    - name: Install pipenv and system dependencies
      run: |
        python -m pip install --upgrade pip pipenv
        sudo apt-get update
        sudo apt-get install -y nginx
          
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: yarn install --frozen-lockfile
      
    - name: Build frontend
      working-directory: ./frontend
      run: yarn build
      
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        pipenv install --deploy --ignore-pipfile
        # Install gunicorn for production WSGI server
        pipenv install gunicorn
        
    - name: Test Gunicorn configuration
      working-directory: ./backend
      run: |
        # Test that Gunicorn can load the application
        pipenv run gunicorn --check-config wsgi:app
        
    - name: Create nginx configuration
      run: |
        sudo tee /etc/nginx/sites-available/flask-app << 'EOF'
        server {
            listen 80;
            server_name localhost;

            # Serve static assets directly with nginx
            location /assets/ {
                alias /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/frontend/dist/assets/;
                expires 1y;
                add_header Cache-Control "public, immutable";
            }

            # Serve React app for root and client-side routes
            location / {
                root /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/frontend/dist;
                try_files $uri $uri/ /index.html;
            }

            # Proxy API requests to Flask via Gunicorn
            location /api/ {
                include /etc/nginx/proxy_params;
                proxy_pass http://unix:/tmp/flask-app.sock;
            }

        }
        EOF
        
        # Enable the site
        sudo ln -sf /etc/nginx/sites-available/flask-app /etc/nginx/sites-enabled/
        sudo rm -f /etc/nginx/sites-enabled/default
        
    - name: Verify frontend build
      run: |
        if [ -d "frontend/dist" ]; then
          echo "✅ Frontend built successfully"
          ls -la frontend/dist/
        else
          echo "❌ Frontend build directory not found"
          exit 1
        fi
        
    - name: Test nginx configuration
      run: |
        sudo nginx -t
        
    - name: Start Gunicorn server
      working-directory: ./backend
      run: |
        # Start Gunicorn with Unix socket
        pipenv run gunicorn \
          --bind unix:/tmp/flask-app.sock \
          --workers 4 \
          --timeout 120 \
          --keep-alive 2 \
          --max-requests 1000 \
          --max-requests-jitter 50 \
          --preload \
          --daemon \
          --pid /tmp/gunicorn.pid \
          --error-logfile /tmp/gunicorn-error.log \
          --access-logfile /tmp/gunicorn-access.log \
          --log-level info \
          wsgi:app
          
        # Wait for socket to be created
        timeout 30 bash -c 'until [ -S /tmp/flask-app.sock ]; do sleep 1; done'
        
        # Set proper permissions for nginx
        sudo chmod 666 /tmp/flask-app.sock
        
    - name: Start nginx
      run: |
        sudo systemctl start nginx
        sudo systemctl status nginx --no-pager
        
    - name: Test application
      run: |
        # Wait for services to be ready
        sleep 5
        
        # Test that the application is responding
        echo "Testing application endpoints..."
        
        # Test main page
        if curl -f -s http://localhost/ > /dev/null; then
          echo "✅ Main page is accessible"
        else
          echo "❌ Main page failed"
        fi
        
        # Test API endpoint (adjust as needed)
        if curl -f -s http://localhost/api/health > /dev/null 2>&1; then
          echo "✅ API endpoint is accessible"
        else
          echo "⚠️  API health endpoint not found (this may be expected)"
        fi
        
    - name: Show logs for debugging
      if: always()
      run: |
        echo "=== Nginx Error Log ==="
        sudo tail -n 20 /var/log/nginx/error.log || echo "No nginx error log"
        
        echo "=== Nginx Access Log ==="
        sudo tail -n 20 /var/log/nginx/access.log || echo "No nginx access log"
        
        echo "=== Gunicorn Error Log ==="
        tail -n 20 /tmp/gunicorn-error.log || echo "No gunicorn error log"
        
        echo "=== Gunicorn Access Log ==="
        tail -n 20 /tmp/gunicorn-access.log || echo "No gunicorn access log"
        
    - name: Run tests
      working-directory: ./backend
      run: |
        # Run your test suite
        # pipenv run python -m pytest tests/
        echo "Backend tests would run here"
        
    - name: Cleanup
      if: always()
      run: |
        # Stop services
        if [ -f /tmp/gunicorn.pid ]; then
          sudo kill $(cat /tmp/gunicorn.pid) || true
          rm -f /tmp/gunicorn.pid
        fi
        
        sudo systemctl stop nginx || true
        
        # Clean up socket file
        rm -f /tmp/flask-app.sock

  # Production deployment job (optional)
  deploy-production:
    needs: build-and-deploy
    runs-on: [ubuntu-latest]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy to production server
      run: |
        echo "This is where you would deploy to your production server"
        echo "Consider using tools like:"
        echo "- SSH deployment scripts"
        echo "- Docker containers"
        echo "- Cloud deployment actions"
        echo "- Infrastructure as Code (Terraform, etc.)"