name: Build Frontend and Start Backend

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pipenv dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pipenv
        key: ${{ runner.os }}-pipenv-${{ hashFiles('backend/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pipenv-
          
    - name: Install pipenv
      run: python -m pip install --upgrade pip pipenv
          
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: yarn install --frozen-lockfile
      
    - name: Build frontend
      working-directory: ./frontend
      run: yarn build
      
    - name: create .env.local
      shell: bash
      working-directory: ./backend
      env:
        CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
        HOST: ${{ secrets.HOST }}
      run: |
        echo "VITE_SPOTIFY_CLIENT_ID=$CLIENT_ID" > .env.local
        echo "VITE_SPOTIFY_CLIENT_SECRET=$CLIENT_SECRET" >> .env.local
        echo "VITE_HOST=$HOST" >> .env.local
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        pipenv install --deploy --ignore-pipfile    
    - name: Start backend server (background)
      working-directory: ./backend
      run: |
        # Start the server in the background using pipenv
        pipenv run flask run &
        # Store the PID for later cleanup
        echo $! > server.pid
        # Wait a moment for server to start
        sleep 5
      env:
        # Add any environment variables your backend needs
        FLASK_ENV: production
        # DATABASE_URL: ${{ secrets.DATABASE_URL }}
        
    - name: Test server is running
      run: |
        # Test that the server is responding (adjust URL as needed)
        curl -f http://localhost:5000/health || curl -f http://localhost:8000/health || echo "Server health check failed"
        
    - name: Cleanup
      if: always()
      working-directory: ./backend
      run: |
        # Kill the background server process if it exists
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi